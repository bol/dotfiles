"
" ~/.vimrc
"
" Install Plugins
" -----------------------------------------------------------------------------
set nocompatible
syntax on
filetype plugin indent on

call plug#begin()
" Theme and look
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'powerline/fonts', { 'do' : './install.sh' }
Plug 'majutsushi/tagbar'

" General
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-eunuch'
Plug 'vim-syntastic/syntastic'
Plug 'Valloric/YouCompleteMe', { 'do' :
            \ './install.py' .
            \ ' --java-completer' }
Plug 'mbbill/undotree'
Plug 'godlygeek/tabular'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-dispatch'
Plug 'will133/vim-dirdiff'

" Git
Plug 'tpope/vim-fugitive'

" Languages and formats
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'cespare/vim-toml'
Plug 'elzr/vim-json'
Plug 'vim-ruby/vim-ruby'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'vim-scripts/groovyindent-unix'
Plug 'rust-lang/rust.vim'
Plug 'chase/vim-ansible-yaml'
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
call plug#end()

" Settings
" -----------------------------------------------------------------------------

" General
set hidden               " hide buffer instead of closing on switch
set mouse-=a             " don't go to visual mode on mouse click

" Folding
set foldignore=          " don't ignore comments when folding
set foldlevel=99         " open all folds by default
set foldmethod=syntax    " collapse code based on syntax

" Tabs
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
set list listchars=
            \tab:▸\ ,
            \trail:·,
            \extends:»,
            \precedes:«,
            \nbsp:×

" Searches
set hlsearch             " highlight search results
set ignorecase           " case insensitive searching
set smartcase            " override ignorecase if upper case typed

" Colors / Theme
set bg=dark
set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
let g:solarized_termcolors=256
colorscheme solarized
highlight Comment cterm=italic

" vimdiff
if &diff
    set lines=60 columns=184
    set foldminlines=99999
    set nomodifiable
    set nowrite
endif

" Plugin settings
" -----------------------------------------------------------------------------

" Syntastic
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

let g:syntastic_java_checkers=['javac']
let g:syntastic_java_javac_config_file_enabled = 1

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = './node_modules/.bin/eslint'

let g:syntastic_quiet_messages = { "type": "style" }

let g:enable_style_warnings= 0
function! ToggleStyleWarnings()
    if g:enable_style_warnings
        let g:syntastic_quiet_messages = { "type": "style" }
        let g:enable_style_warnings=0
        call SyntasticCheck()
    else
        let g:syntastic_quiet_messages = {}
        let g:enable_style_warnings=0
        call SyntasticCheck()
    endif
endfunction

nnoremap <A-Up> :lprev<CR>
nnoremap <A-Down> :lnext<CR>
nnoremap <A-s> :call ToggleStyleWarnings()<CR>

" Airline
let g:airline_powerline_fonts=1
let g:airline_theme="solarized"
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
nnoremap <A-Right> :bnext<CR>
nnoremap <A-Left> :bprev<CR>
nnoremap <A-d> :bdelete<CR>

" delimitMate
" -----------------------------------------------------------------------------
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" vim-ansible-yaml
" -----------------------------------------------------------------------------
let g:ansible_options = {
            \ 'ignore_blank_lines' : 0,
            \ 'documentation_mapping' : '<C-K>'
            \ }

" YouCompleteMe
" -----------------------------------------------------------------------------
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
map <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_python_binary_path = 'python'

" Gundo
" -----------------------------------------------------------------------------
map <C-u> :UndotreeToggle<CR>

" Tagbar
" -----------------------------------------------------------------------------
nmap <C-t> :TagbarToggle<CR>
let g:tagbar_type_groovy = {
            \ 'ctagstype' : 'groovy',
            \ 'kinds'     : [
            \ 'p:package:1',
            \ 'c:classes',
            \ 'i:interfaces',
            \ 't:traits',
            \ 'e:enums',
            \ 'm:methods',
            \ 'f:fields:1'
            \ ]
            \ }

" Markdown-preview
" -----------------------------------------------------------------------------
let vim_markdown_preview_use_xdg_open=1
let vim_markdown_preview_github=1

let vim_markdown_preview_hotkey='<C-p>'


" Maps
" -----------------------------------------------------------------------------

" Toggle Vexplore with Ctrl-E
function! ToggleVExplorer()
    if exists("t:expl_buf_num")
        let expl_win_num = bufwinnr(t:expl_buf_num)
        if expl_win_num != -1
            let cur_win_nr = winnr()
            exec expl_win_num . 'wincmd w'
            close
            exec cur_win_nr . 'wincmd w'
            unlet t:expl_buf_num
        else
            unlet t:expl_buf_num
        endif
    else
        exec '1wincmd w'
        Vexplore
        let t:expl_buf_num = bufnr("%")
    endif
endfunction
" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_altv = 1
let g:netrw_browse_split = 4
let g:netrw_liststyle=3
let g:netrw_winsize=14

" Change directory to the current buffer when opening files.
set autochdir
map <silent> <C-E> :call ToggleVExplorer()<CR>

" fugitive git bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>

" fugitive
let g:fugitive_bitbucket_domains = ['scm.prod.nordnet.se']

augroup vimrc     " Source vim configuration upon save
    autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
    autocmd! BufWritePost $MYGVIMRC if has('gui_running') | source % | echom "Reloaded " . $MYGVIMRC | endif | redraw
augroup END
