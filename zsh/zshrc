# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory extendedglob notify
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/bol/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

# Environment variables
export EDITOR=/usr/bin/vim
export MAIL=/var/mail/$USER

# Load color support.
autoload -U colors
colors

# Load custom dircolors
[[ -f ~/.dir_colours ]] && eval $(dircolors ~/.dir_colours)

# Cache for completions
zstyle ':completion::complete:*' use-cache 1

function precmd {
    # let's get the current get branch that we are under
    # ripped from /etc/bash_completion.d/git from the git devs
    git_ps1 () {
        if which git &> /dev/null; then
            local g="$(git rev-parse --git-dir 2>/dev/null)"
            if [ -n "$g" ]; then
                local r
                local b
                if [ -d "$g/rebase-apply" ]; then
                    if test -f "$g/rebase-apply/rebasing"; then
                        r="|REBASE"
                    elif test -f "$g/rebase-apply/applying"; then
                        r="|AM"
                    else
                        r="|AM/REBASE"
                    fi
                    b="$(git symbolic-ref HEAD 2>/dev/null)"
                elif [ -f "$g/rebase-merge/interactive" ]; then
                    r="|REBASE-i"
                    b="$(cat "$g/rebase-merge/head-name")"
                elif [ -d "$g/rebase-merge" ]; then
                    r="|REBASE-m"
                    b="$(cat "$g/rebase-merge/head-name")"
                elif [ -f "$g/MERGE_HEAD" ]; then
                    r="|MERGING"
                    b="$(git symbolic-ref HEAD 2>/dev/null)"
                else
                    if [ -f "$g/BISECT_LOG" ]; then
                        r="|BISECTING"
                    fi
                    if ! b="$(git symbolic-ref HEAD 2>/dev/null)"; then
                       if ! b="$(git describe --exact-match HEAD 2>/dev/null)"; then
                          b="$(cut -c1-7 "$g/HEAD")..."
                       fi
                    fi
                fi
                if [ -n "$1" ]; then
                     printf "$1" "${b##refs/heads/}$r"
                else
                     printf "%s" " G:${b##refs/heads/}$r"
                fi
            fi
        else
            printf ""
        fi
    }

    PR_GIT="$(git_ps1)"

    # The following 9 lines of code comes directly from Phil!'s ZSH prompt
    # http://aperiodic.net/phil/prompt/
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    local PROMPTSIZE=${#${(%):--- %D{%R.%S %a %b %d %Y}\! }}
    local PWDSIZE=${#${(%):-%~}}

    if [[ "$PROMPTSIZE + $PWDSIZE" -gt $TERMWIDTH ]]; then
	(( PR_PWDLEN = $TERMWIDTH - $PROMPTSIZE ))
    fi

    # set a simple variable to show when in screen
    if [[ -n "${WINDOW}" ]]; then
        PR_SCREEN=" S:${WINDOW}"
    else
        PR_SCREEN=""
    fi

    # check if jobs are executing
    if [[ $(jobs | wc -l) -gt 0 ]]; then
        PR_JOBS=" J:%j"
    else
        PR_JOBS=""
    fi

    if [[ -f ~/.mcabber/unread.status ]]; then
        NCHAT="$(awk '{UNREAD=$1} END{print UNREAD}' ~/.mcabber/unread.status)"
    else
        NCHAT="0"
    fi
    if [[ $NCHAT -gt 0 ]]; then
            PR_CHAT=" C:$NCHAT"
    else
            PR_CHAT=""
    fi
}

setprompt () {
    # Need this, so the prompt will work
    setopt prompt_subst

    # let's load colors into our environment, then set them
    autoload colors

    if [[ "$terminfo[colors]" -gt 8 ]]; then
        colors
    fi

    # The variables are wrapped in %{%}. This should be the case for every
    # variable that does not contain space.
    for COLOR in RED GREEN YELLOW BLUE WHITE BLACK GREY CYAN; do
        eval PR_$COLOR='%{$fg_no_bold[${(L)COLOR}]%}'
        eval PR_BOLD_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
    done

    # Finally, let's set the prompt
    PROMPT='${PR_BOLD_RED}<${PR_RED}<${PR_BOLD_BLACK}<${PR_BOLD_GREY} \
%D{%R.%S %a %b %d %Y}${PR_RED}!${PR_BOLD_WHITE}%${PR_PWDLEN}<...<%~%<< \

${PR_BOLD_RED}<${PR_RED}<${PR_BOLD_BLACK}<\
${PR_BOLD_GREY} %n@%m${PR_RED}!${PR_BOLD_WHITE}${PR_BOLD_RED}\
%(?.. E:%?)${PR_BOLD_BLUE}${PR_SCREEN}${PR_JOBS}${PR_CHAT}${PR_GIT}${PR_BOLD_CYAN}\

${PR_BOLD_BLACK}>${PR_GREEN}>${PR_BOLD_GREEN}>\
%{${reset_color}%} '

    # Of course we need a matching continuation prompt
    PROMPT2='\
${PR_BOLD_BLACK}>${PR_GREEN}>${PR_BOLD_GREEN}>\
${PR_BOLD_WHITE} %_ ${PR_BOLD_BLACK}>${PR_GREEN}>\
${PR_BOLD_GREEN}>%{${reset_color}%} '
}

setprompt

# Setup which characters should be concidered to be words for alt-backspace word rubbing.
export WORDCHARS='*?-[]~=.&;!#$%^(){}<>/'
bindkey '^[[Z' reverse-menu-complete
bindkey '^[[A' history-search-backward
bindkey '^[[B' history-search-forward

DIRSTACKFILE="$HOME/.cache/zsh/dirs"
if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  [[ -d $dirstack[1] ]] && cd $dirstack[1]
fi
chpwd() {
  print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
}

DIRSTACKSIZE=20

setopt autopushd pushdsilent pushdtohome

## Remove duplicate entries
setopt pushdignoredups

## This reverts the +/- operators.
setopt pushdminus

# Dont intercept rm *.
setopt rmstarsilent

# Unset keyring stuff if set
unset GNOME_KEYRING_CONTROL
unset GNOME_KEYRING_PID
unset GPG_AGENT_INFO

# Syntax highlightning
if [ -r /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
	source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Aliases and functions for the shell
alias ls="ls --color=auto"
alias grep="grep --color=auto"
alias nmap-traceroute="sudo nmap -sn -Pn --traceroute --reason"
alias ssh="TERM=xterm-256color ssh"

function purge-ssh {
	host=$1
	getent hosts $host|awk -v host=$host '
		function remove(entry) {
			printf "Removing %s\n", entry
			cmd=sprintf("ssh-keygen -f ~/.ssh/known_hosts -R %s 2>/dev/null", entry)
			system(cmd)
		}

		{
			remove(host)
			remove($2)
			remove($1)
		}'
}
